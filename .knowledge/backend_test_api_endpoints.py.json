{"is_source_file": true, "format": "Python", "description": "Test script for verifying API endpoints of the Bear Data Viewer application, including health checks, bear data retrieval, bear movement detection, and OpenAPI documentation accessibility.", "external_files": ["requests", "json", "datetime"], "external_methods": ["requests.get", "assert", "print", "datetime.now"], "published": ["run_comprehensive_test", "main"], "classes": [], "methods": [{"name": "test_health_endpoint(base_url)", "description": "Tests the health check API endpoint by verifying status code and response content.", "scope": "", "scopeKind": ""}, {"name": "test_bears_endpoint(base_url)", "description": "Tests the endpoint that returns bear data, validating response structure.", "scope": "", "scopeKind": ""}, {"name": "test_bear_movements_endpoint(base_url)", "description": "Tests the bear movements detection endpoint, checking response code and data structure, handling 503 status.", "scope": "", "scopeKind": ""}, {"name": "test_bear_movements_summary_endpoint(base_url)", "description": "Tests the summary endpoint for bear movements, validating response data.", "scope": "", "scopeKind": ""}, {"name": "test_openapi_documentation(base_url)", "description": "Checks access to OpenAPI docs and the presence of key endpoints in the specification.", "scope": "", "scopeKind": ""}, {"name": "run_comprehensive_test()", "description": "Runs all API tests sequentially, outputs results, and provides overall success status.", "scope": "", "scopeKind": ""}, {"name": "main()", "description": "Main function invoking the comprehensive test suite and providing troubleshooting info.", "scope": "", "scopeKind": ""}], "calls": ["requests.get", "print", "assert", "datetime.now"], "search-terms": ["test_api_endpoints", "bear-movements", "OpenAPI", "health check", "bears endpoint", "movement detection", "API documentation"], "state": 2, "file_id": 18, "knowledge_revision": 48, "git_revision": "", "ctags": [{"_type": "tag", "name": "main", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def main():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "run_comprehensive_test", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def run_comprehensive_test():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "test_bear_movements_endpoint", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def test_bear_movements_endpoint(base_url):$/", "language": "Python", "kind": "function", "signature": "(base_url)"}, {"_type": "tag", "name": "test_bear_movements_summary_endpoint", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def test_bear_movements_summary_endpoint(base_url):$/", "language": "Python", "kind": "function", "signature": "(base_url)"}, {"_type": "tag", "name": "test_bears_endpoint", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def test_bears_endpoint(base_url):$/", "language": "Python", "kind": "function", "signature": "(base_url)"}, {"_type": "tag", "name": "test_health_endpoint", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def test_health_endpoint(base_url):$/", "language": "Python", "kind": "function", "signature": "(base_url)"}, {"_type": "tag", "name": "test_openapi_documentation", "path": "/home/kavia/workspace/code-generation/bear-data-viewer-157938-157962/backend/test_api_endpoints.py", "pattern": "/^def test_openapi_documentation(base_url):$/", "language": "Python", "kind": "function", "signature": "(base_url)"}], "hash": "016588cc5e8ec2dbe8484e0b85819d4d", "format-version": 4, "code-base-name": "backend", "filename": "backend/test_api_endpoints.py", "revision_history": [{"48": ""}]}